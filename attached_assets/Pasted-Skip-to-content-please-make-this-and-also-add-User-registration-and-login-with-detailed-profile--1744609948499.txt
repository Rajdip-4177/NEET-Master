Skip to content
please make this and also add

User registration and login with detailed profile (email, phone, name, date of birth, age, address)
Class selection system (options: 11, 12, 13-dropper)
Add, edit, and delete tasks with title, due date, and priority
View and manage personal task list
Profile management to update user information
40 minutes ago
RUNDEFINED

rajdipmahanty41
I'll help create a plan for your NEET preparation website. First, let me understand your requirements by analyzing the information provided.

App plan
Build the initial prototype
PostgreSQL database integration for persistent storage
Real-time progress tracking with statistics dashboard
Advanced search functionality for questions and content
Personalized study recommendations based on quiz performance
Timeline
Visual preview
(~2 min.)
First app version
(~10 min.)
rajdipmahanty41 approved the plan
Checkpoint made
39 minutes ago
‚Ä¢
Free
Initial checkpoint

Installed dependencies

Created server/storage.ts

Created server/routes.ts

Created server/auth.ts

Created client/index.html

Created theme.json

Created client/src/App.tsx

Installed dependencies
Agent encountered an error while running, we are investigating the issue.

If you need a reference, then you can use this

2 minutes ago
RUNDEFINED

rajdipmahanty41
Reviewing your message...

Message Agent‚Ä¶
Created client/src/App.tsx
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { AuthProvider } from "@/hooks/use-auth";

import NotFound from "@/pages/not-found";
import HomePage from "@/pages/home-page";
import AuthPage from "@/pages/auth-page";
import SubjectPage from "@/pages/subject-page";
import ChapterPage from "@/pages/chapter-page";
import QuizPage from "@/pages/quiz-page";
import QuizResultPage from "@/pages/quiz-result-page";
import TasksPage from "@/pages/tasks-page";
import ProfilePage from "@/pages/profile-page";

import { ProtectedRoute } from "@/lib/protected-route";
import Navbar from "@/components/layout/navbar";
import Footer from "@/components/layout/footer";

function Router() {
  return (
    <div className="flex flex-col min-h-screen">
      <Navbar />
      <main className="flex-grow">
        <Switch>
          <Route path="/auth" component={AuthPage} />
          <ProtectedRoute path="/" component={HomePage} />
          <ProtectedRoute path="/biology" component={() => <SubjectPage subject="biology" />} />
          <ProtectedRoute path="/physics" component={() => <SubjectPage subject="physics" />} />
          <ProtectedRoute path="/chemistry" component={() => <SubjectPage subject="chemistry" />} />
          <ProtectedRoute path="/:subject/:chapter" component={ChapterPage} />
          <ProtectedRoute path="/:subject/:chapter/test/:testId" component={QuizPage} />
          <ProtectedRoute path="/:subject/:chapter/test/:testId/result" component={QuizResultPage} />
          <ProtectedRoute path="/tasks" component={TasksPage} />
          <ProtectedRoute path="/profile" component={ProfilePage} />
          <Route component={NotFound} />
        </Switch>
      </main>
      <Footer />
    </div>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Router />
        <Toaster />
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;

Installed dependencies
Dependencies
The agent is thinking.
Preview your App here
The App is currently not running.
is working on it.
3s
 ‚Ä¢ 
Just now
- Replit
Pasted-Build-me-this-website-i-have-provided-the-details-Goal-Build-a-NEET-Preparation-Website-NEET-Ma-1744607062725.txt
Build me this website i have provided the details
‚úÖ Goal: Build a NEET Preparation Website (NEET Master)
I am trying to build a Single Page Application (SPA) using technologies like React + React Router, so there are no full-page reloads ‚Äî only view changes, and everything is handled on the front-end using the HTML5 History API.
________________________________________
üî∑ 1. Homepage
What it looks like:
‚Ä¢	Big centered title: NEET Master
‚Ä¢	Three clickable cards or buttons (styled attractively) for:
o	Biology
o	Physics
o	Chemistry
Behavior:
‚Ä¢	Clicking on any subject uses the History API to navigate to a new URL (e.g., /biology, /physics, /chemistry) without reloading the page.
________________________________________
üî∑ 2. Subject Page (e.g., Biology Page)
What it looks like:
‚Ä¢	A scrollable list of all chapters in that subject.
o	Each chapter is displayed as a clickable card or list item.
o	The scrolling should be smooth and infinite-scroll like (or paginated if too long).
Behavior:
‚Ä¢	URL changes to something like /biology
‚Ä¢	Clicking on a chapter like ‚ÄúCell ‚Äì The Unit of Life‚Äù should change the URL to /biology/cell-the-unit-of-life and open the Chapter View.
________________________________________
üî∑ 3. Chapter View (for any selected chapter)
What it looks like:
‚Ä¢	The view now shows three tabs or buttons:
1.	Test Yourself
ÔÇß	Contains 10 (or fewer) mini-tests
ÔÇß	Each test has 25 questions related to specific sub-topics of that chapter
ÔÇß	Clicking on a test opens the quiz
2.	Notes
ÔÇß	A PDF viewer opens up displaying your uploaded notes
3.	NCERT
ÔÇß	Displays or embeds the official NCERT PDF for that chapter
Behavior:
‚Ä¢	URL is now like /biology/cell-the-unit-of-life
‚Ä¢	Each tab (Test Yourself, Notes, NCERT) could update the view internally or add a sub-path like /test, /notes, /ncert.
________________________________________
üî∑ 4. Browser Navigation (History API)
Key Requirement:
‚Ä¢	All navigation must be done using client-side routing.
‚Ä¢	You‚Äôll use React Router‚Äôs useNavigate, useLocation, and useHistory hooks internally (or plain window.history.pushState()).
‚Ä¢	Clicking the Back button should:
o	From Chapter View ‚Üí go back to Chapter List
o	From Chapter List ‚Üí go back to Home
This makes the site feel like a natural app ‚Äî not a clunky reload-based website.
________________________________________
üß† Final Prompt You Can Use (Full AI Prompt for Coding Help)
Create a NEET preparation website called NEET Master using React, styled with TailwindCSS or CSS modules, and routing with React Router DOM (client-side routing).
Key Features:
1.	Homepage with a big title ("NEET Master") and three clickable subject cards: Biology, Physics, Chemistry.
2.	Clicking on a subject (like Biology) should navigate to a scrollable list of all chapters for that subject (e.g., /biology) without reloading the page.
3.	Clicking a chapter opens a Chapter Detail View (e.g., /biology/cell-the-unit-of-life) with 3 sections:
o	Test Yourself ‚Äì Show 10 mini-tests, each with 25 MCQs based on 10 sub-topics. Smaller chapters may have fewer tests.
o	Notes ‚Äì Display an embedded PDF of notes that I will upload.
o	NCERT ‚Äì Embed or open the NCERT chapter PDF in a viewer.
4.	Use the HTML5 History API or React Router so that clicking the browser back button navigates properly to the previous view (subject ‚Üí home, chapter ‚Üí subject list, etc.).
5.	No full-page reloads ‚Äî the app should be a true Single Page Application (SPA).
Bonus: Organize components cleanly. Use folders like /components, /pages, /routes, /assets/pdfs, and prepare dummy data if actual PDFs aren‚Äôt uploaded yet.
________________________________________
üß™ NEET Master ‚Äì Quiz Interface: Ultra-Detailed Breakdown for AI Implementation
________________________________________
üß© Page Overview
This quiz interface has 3 primary sections on the screen:
---------------------------------------------------------
|                      TOP BAR                          |  ‚Üê Header (Chapter + Timer)
---------------------------------------------------------
|                                                       |
|  Main Question Box     |   Question Nav Sidebar       |
|  (75% width)           |   (25% width)                |
|                        |                              |
|                        |                              |
---------------------------------------------------------
|  Footer (with buttons like Mark for Review, etc.)     |
---------------------------------------------------------
________________________________________
üî∑ 1. Header (Top Section)
Design:
‚Ä¢	Full-width div with:
o	Rounded corners
o	Light colored background
o	Fixed height (e.g. 80px)
o	Flexbox layout to justify content space-between or use CSS grid
Contents:
‚Ä¢	Left/Center: Chapter name (e.g. ‚ÄúCell ‚Äì The Unit of Life‚Äù)
‚Ä¢	Right: Timer (e.g. 24:13 remaining)
Timer Logic:
‚Ä¢	Starts as soon as the quiz page loads
‚Ä¢	Duration varies by subj...