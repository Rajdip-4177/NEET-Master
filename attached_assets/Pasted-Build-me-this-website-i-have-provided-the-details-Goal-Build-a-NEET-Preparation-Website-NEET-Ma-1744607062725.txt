Build me this website i have provided the details
✅ Goal: Build a NEET Preparation Website (NEET Master)
I am trying to build a Single Page Application (SPA) using technologies like React + React Router, so there are no full-page reloads — only view changes, and everything is handled on the front-end using the HTML5 History API.
________________________________________
🔷 1. Homepage
What it looks like:
•	Big centered title: NEET Master
•	Three clickable cards or buttons (styled attractively) for:
o	Biology
o	Physics
o	Chemistry
Behavior:
•	Clicking on any subject uses the History API to navigate to a new URL (e.g., /biology, /physics, /chemistry) without reloading the page.
________________________________________
🔷 2. Subject Page (e.g., Biology Page)
What it looks like:
•	A scrollable list of all chapters in that subject.
o	Each chapter is displayed as a clickable card or list item.
o	The scrolling should be smooth and infinite-scroll like (or paginated if too long).
Behavior:
•	URL changes to something like /biology
•	Clicking on a chapter like “Cell – The Unit of Life” should change the URL to /biology/cell-the-unit-of-life and open the Chapter View.
________________________________________
🔷 3. Chapter View (for any selected chapter)
What it looks like:
•	The view now shows three tabs or buttons:
1.	Test Yourself
	Contains 10 (or fewer) mini-tests
	Each test has 25 questions related to specific sub-topics of that chapter
	Clicking on a test opens the quiz
2.	Notes
	A PDF viewer opens up displaying your uploaded notes
3.	NCERT
	Displays or embeds the official NCERT PDF for that chapter
Behavior:
•	URL is now like /biology/cell-the-unit-of-life
•	Each tab (Test Yourself, Notes, NCERT) could update the view internally or add a sub-path like /test, /notes, /ncert.
________________________________________
🔷 4. Browser Navigation (History API)
Key Requirement:
•	All navigation must be done using client-side routing.
•	You’ll use React Router’s useNavigate, useLocation, and useHistory hooks internally (or plain window.history.pushState()).
•	Clicking the Back button should:
o	From Chapter View → go back to Chapter List
o	From Chapter List → go back to Home
This makes the site feel like a natural app — not a clunky reload-based website.
________________________________________
🧠 Final Prompt You Can Use (Full AI Prompt for Coding Help)
Create a NEET preparation website called NEET Master using React, styled with TailwindCSS or CSS modules, and routing with React Router DOM (client-side routing).
Key Features:
1.	Homepage with a big title ("NEET Master") and three clickable subject cards: Biology, Physics, Chemistry.
2.	Clicking on a subject (like Biology) should navigate to a scrollable list of all chapters for that subject (e.g., /biology) without reloading the page.
3.	Clicking a chapter opens a Chapter Detail View (e.g., /biology/cell-the-unit-of-life) with 3 sections:
o	Test Yourself – Show 10 mini-tests, each with 25 MCQs based on 10 sub-topics. Smaller chapters may have fewer tests.
o	Notes – Display an embedded PDF of notes that I will upload.
o	NCERT – Embed or open the NCERT chapter PDF in a viewer.
4.	Use the HTML5 History API or React Router so that clicking the browser back button navigates properly to the previous view (subject → home, chapter → subject list, etc.).
5.	No full-page reloads — the app should be a true Single Page Application (SPA).
Bonus: Organize components cleanly. Use folders like /components, /pages, /routes, /assets/pdfs, and prepare dummy data if actual PDFs aren’t uploaded yet.
________________________________________
🧪 NEET Master – Quiz Interface: Ultra-Detailed Breakdown for AI Implementation
________________________________________
🧩 Page Overview
This quiz interface has 3 primary sections on the screen:
---------------------------------------------------------
|                      TOP BAR                          |  ← Header (Chapter + Timer)
---------------------------------------------------------
|                                                       |
|  Main Question Box     |   Question Nav Sidebar       |
|  (75% width)           |   (25% width)                |
|                        |                              |
|                        |                              |
---------------------------------------------------------
|  Footer (with buttons like Mark for Review, etc.)     |
---------------------------------------------------------
________________________________________
🔷 1. Header (Top Section)
Design:
•	Full-width div with:
o	Rounded corners
o	Light colored background
o	Fixed height (e.g. 80px)
o	Flexbox layout to justify content space-between or use CSS grid
Contents:
•	Left/Center: Chapter name (e.g. “Cell – The Unit of Life”)
•	Right: Timer (e.g. 24:13 remaining)
Timer Logic:
•	Starts as soon as the quiz page loads
•	Duration varies by subject:
o	Biology: 25 minutes
o	Chemistry: 25 minutes
o	Physics: 35 minutes
•	When timer hits 0:
o	Automatically triggers the submission logic
________________________________________
🔷 2. Main Question Box (Left Column – 75% total area)
Design:
•	A large rounded rectangle
•	Takes 75% of the page width
•	Background color can reflect the subject (e.g., green for Bio)
•	Padding inside for readability
•	Scroll is disabled; only one question shown at a time
Contents:
•	Question Number & Text – large bold font
•	4 Options – Each:
o	Displayed as a clickable card or radio button
o	One option selectable at a time
o	Selecting one updates the quiz state
o	Selected option is highlighted (e.g. blue border)
Optional Features:
•	Lock the selected option unless user changes it manually
•	Save state immediately (no need to click Save separately)
________________________________________
🔷 3. Navigation Sidebar (Right Column – 25% area)
Design:
•	Vertical rounded rectangle, fixed height (match Main Box)
•	White background
•	Inside: 25 small rounded buttons (question numbers)
Each Button Behavior:
•	Click = navigate directly to that question
•	Color represents status:
o	Green = Answered
o	Red = Not Answered
o	Purple = Marked for Review
o	Half Green/Half Purple Diagonal = Answered & Marked
Technical Note:
•	Use Tailwind (e.g. bg-green-500, bg-purple-600)
•	Use conditional CSS based on question state
________________________________________
🔽 4. Footer Controls (Below the Question Box)
Button Layout:
•	Bottom Left: Mark for Review
•	Bottom Right:
o	Previous (disabled on Q1)
o	Save & Next (next question or submission on Q25)
Button Functionality:
•	Mark for Review:
o	Flags the question
o	Updates its color on sidebar to purple
•	Save & Next:
o	Saves current selected option
o	Navigates to next question
•	Previous:
o	Goes to previous question
o	Disabled on first question
________________________________________
🧠 Question State Data Structure
Track each question in memory like this:
questions: [
  {
    id: 1,
    questionText: "...",
    options: ['A', 'B', 'C', 'D'],
    selectedOption: null,
    isMarkedForReview: false,
    status: 'unanswered' // 'answered', 'reviewed', 'answered+reviewed'
  },
  ...
]
Update logic:
•	On selecting an option → update selectedOption & set status: answered
•	On "Mark for Review" → set isMarkedForReview: true
•	If both answered + reviewed → set status: answered+reviewed
________________________________________
🧮 Scoring Logic
•	Stored and calculated on submission:
o	+4 for correct answers
o	-1 for wrong answers
o	0 for unanswered
When quiz is submitted (via time up or clicking "Submit"), loop through:
score = 0;
questions.forEach(q => {
  if (q.selectedOption === q.correctOption) score += 4;
  else if (q.selectedOption !== null) score -= 1;
})
________________________________________
⌛ Timer Logic
•	Start timer when quiz loads using setInterval()
•	Display formatted time (mm:ss)
•	Store time in state
•	Auto-submit on time expiry:
o	Lock options
o	Redirect to Result Dashboard
________________________________________
🧰 Tech Stack Recommendation
Feature	Tool/Library
Component-based frontend	React
Routing & Back Navigation	React Router
Styling	TailwindCSS or SCSS
State management	Redux or useContext
Timer	useEffect + setInterval
PDF Viewer (Notes/NCERT)	react-pdf
Local state backup	LocalStorage or Redux Persist
________________________________________
🔗 Final AI Prompt (Code-Generation-Ready)
Build a NEET quiz interface using React with TailwindCSS and React Router. Each quiz has 25 MCQ-type questions (4 options), one question visible at a time.
Layout:
•	Top Bar: Full-width, rounded rectangle with:
o	Center: Chapter name
o	Right: Timer (25 min for Bio/Chem, 35 for Physics)
•	Main Box (75%): Displays current question and 4 options (selectable)
•	Right Sidebar (25%): Vertical nav bar with 25 clickable buttons (Q1–Q25)
o	Button color updates dynamically:
	Green: Answered
	Red: Unanswered
	Purple: Marked for Review
	Green+Purple Diagonal: Answered + Review
There shold also be an option to bookmark question and i.e. is as follows
Perfect, Rajdip. Focusing only on the Bookmark Toggle in the Analysis Page — here’s a crystal-clear breakdown and how you can implement it:
________________________________________
🔖 Bookmark Toggle in the Analysis Page (Post-Submission)
________________________________________
🎯 Goal:
Allow users to bookmark or unbookmark any question after the quiz is over, directly from the result analysis page. This helps them flag tricky or important questions for revision even after seeing the correct answers and explanations.
________________________________________
🧩 UI/UX Breakdown:
Each question card on the analysis page will include a Bookmark toggle button:
✅ Button Design:
•	Icon style:
o	⭐ (outlined) → Not bookmarked
o	🌟 (filled) → Bookmarked
•	Tooltip/Text:
o	"Bookmark this question" if not yet bookmarked
o	"Remove bookmark" if already bookmarked
•	Placement: Top-right corner of the question card or near the question number
🔘 Example:
<button
  onClick={() => toggleBookmark(question.id)}
  className="text-yellow-500 hover:text-yellow-600 absolute top-3 right-3"
>
  {bookmarkedQuestions.includes(question.id) ? '🌟' : '☆'}
</button>
________________________________________
🧠 Behavior and Logic:
1. State Management (React-style example):
const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);

function toggleBookmark(qid) {
  setBookmarkedQuestions(prev =>
    prev.includes(qid)
      ? prev.filter(id => id !== qid) // remove if already bookmarked
      : [...prev, qid]               // add if not
  );
}
2. Visual Feedback:
•	When toggled, the icon updates instantly.
•	Optional: Show a toast message like:
✅ "Question bookmarked!"
❌ "Bookmark removed."
________________________________________
🔄 Optional Persistent Storage:
To save bookmarks even after refresh:
•	Use localStorage:
useEffect(() => {
  const saved = JSON.parse(localStorage.getItem('bookmarks')) || [];
  setBookmarkedQuestions(saved);
}, []);

useEffect(() => {
  localStorage.setItem('bookmarks', JSON.stringify(bookmarkedQuestions));
}, [bookmarkedQuestions]);
•	Or save to backend under the user’s profile if logged in.
________________________________________
🔗 Final AI Prompt (for Analysis Page Bookmark Toggle):
On the analysis page of a NEET quiz web app, add a bookmark toggle for each question card. Each question should have a star icon in the top-right corner. Clicking the icon bookmarks or unbookmarks the question for future review.
•	If bookmarked: show a filled yellow star (🌟)
•	If not: show an outlined star (☆)
•	Store the state in React using useState, and optionally persist with localStorage
•	Use TailwindCSS for layout and styling, and position the icon at the top-right of each question card

•	Footer Controls:
o	Left: Mark for Review
o	Right: Previous (disabled on Q1), Save & Next (submits on Q25)
Behavior:
•	Selecting option auto-updates answer
•	Timer countdown auto-submits on time expiry
•	Scoring: +4 correct, -1 wrong, 0 unattempted
•	All state managed with Redux or Context
•	Result sent to result dashboard on submit
________________________________________
________________________________________
📊 RESULT DASHBOARD – FULLY DETAILED BREAKDOWN
________________________________________
🔷 🎯 Purpose:
To provide students a quick snapshot of their performance and deep insights into their strengths and weaknesses after completing a NEET-style quiz.
________________________________________
🧩 PAGE STRUCTURE OVERVIEW
-----------------------------------------------------------
|                      RESULT DASHBOARD                  |
-----------------------------------------------------------
| Score Summary Section (Top Card)                       |
| ----------------------------------------------------- |
| Accuracy & Analysis Section (Middle Cards/Graph)      |
| ----------------------------------------------------- |
| Optionally: Question-wise Breakdown Button            |
-----------------------------------------------------------
________________________________________
🔷 1. 🏆 SCORE SUMMARY SECTION
Design:
•	Large card or box at the top
•	Center-aligned with colored background (e.g., success green or soft blue)
•	Rounded corners, shadow, padding
Data Displayed (Big Fonts):
Metric	Description
Test Score	Final score calculated
Correct Questions	Total questions answered correctly
Incorrect Questions	Total questions answered wrongly
Unattempted Questions	Questions not answered at all
Total Positive Marks	Correct answers × +4
Total Negative Marks	Wrong answers × -1
Sample Calculation Example:
•	Correct = 18 → +72
•	Incorrect = 5 → -5
•	Unattempted = 2
•	Final Score = 72 - 5 = 67
________________________________________
🔷 2. 📊 ACCURACY & ANALYSIS SECTION
🎯 Accuracy Metric:
Accuracy (%) = (Correct Questions / Attempted Questions) * 100
•	Display as both a number and a circular progress bar
•	Attempted Questions = Correct + Incorrect
Example:
•	Correct: 18
•	Incorrect: 5
•	Attempted = 23
•	Accuracy = (18/23) × 100 = 78.26%
📈 Optional Additions (for future):
•	Subject-wise analysis (if you combine multiple chapters or subjects)
•	Time spent per question
•	Pie chart of answer statuses:
o	Green slice: Correct
o	Red: Incorrect
o	Gray: Unattempted
o	Purple: Marked for Review
________________________________________
🔷 3. 📋 QUESTION-WISE BREAKDOWN (Optional Advanced Feature)
•	Expandable section or "View Detailed Report" button
•	Each question displayed with:
o	Question Number
o	Your Selected Answer
o	Correct Answer
o	Status: ✅ / ❌ / ⏳
o	Marked for Review: Yes/No
Useful for reviewing weak areas.
________________________________________
📦 DATA STRUCTURE USED FOR SCORING
You should loop through this data to calculate results:
{
  selectedOption: 'A',
  correctOption: 'B',
  markedForReview: false,
  questionId: 5
}
Score Calculation Logic:
let correct = 0, incorrect = 0, unattempted = 0;

questions.forEach(q => {
  if (!q.selectedOption) unattempted++;
  else if (q.selectedOption === q.correctOption) correct++;
  else incorrect++;
});

let totalPositive = correct * 4;
let totalNegative = incorrect * 1;
let finalScore = totalPositive - totalNegative;
let accuracy = (correct / (correct + incorrect)) * 100;
________________________________________
🎨 TECH STACK & VISUALS SUGGESTIONS
Feature	Recommended Tool
UI Components	React + TailwindCSS
Charts	recharts, chart.js, or react-circular-progressbar
State Management	Redux / Context
Navigation Back to Quiz	React Router
Result Export (Optional)	PDF generator / print
________________________________________
🔗 FINAL AI PROMPT FOR THIS FEATURE:
Build a result dashboard in React for a NEET-style quiz app. After the test is submitted, the dashboard should display:
Main Metrics:
•	Final Score = (Correct × 4) - (Incorrect × 1)
•	Correct Questions – Total answered correctly
•	Incorrect Questions – Total answered wrongly
•	Unattempted Questions – No option selected
•	Total Positive Marks = Correct × 4
•	Total Negative Marks = Incorrect × 1
•	Accuracy (%) = (Correct / Attempted) × 100
Layout:
•	A top summary card with all metrics in large fonts
•	A visual display of accuracy (circular bar or chart)
•	Optional: Expandable question-wise breakdown
Styling:
•	TailwindCSS for UI
•	Use react-circular-progressbar or similar for visual accuracy
•	Must be responsive, clean, and mobile-friendly
State must be derived from quiz question array (with selected and correct answers stored).
________________________________________
Some improvements I would like to add
🌐 1. Homepage Structure: “NEET Master” Landing Page
🎯 Current:
•	Big title: “NEET Master”
•	Three boxes: Biology, Physics, Chemistry
•	Click → opens a chapter list
✅ Improvements:
🔹 Add Short Descriptions Below Each Subject:
“Biology – 11th & 12th NCERT aligned chapters with notes, tests & NCERT PDFs.”
Helps SEO and first-time users.
🔹 Responsive Design:
Ensure mobile-friendly display with:
•	Grid layout on desktop
•	Collapsible cards or stack-view on mobile
🔹 Use Cards with Icons:
•	Biology 🧬, Chemistry ⚗️, Physics 🧲
•	Improves recognition and makes UI more friendly
🔹 Add “Recently Visited Chapters” Section:
Helps users return to where they left off. Stored via localStorage.
________________________________________
📚 2. Chapter List Page (Per Subject)
🎯 Current:
•	On click of subject → scrollable list of all chapters
✅ Improvements:
🔹 Add Search and Filter:
•	Search bar: “Search for a chapter…”
•	Filter: Class 11 or Class 12 toggle
🔹 Chapter Progress Badges:
•	✅ Completed
•	🟡 In Progress
•	🔖 Bookmarked
Stores per user (localStorage or backend)
🔹 Collapse/Expand Topic View (Optional):
Group by unit → collapse/expand topics like:
markdown
CopyEdit
▶️ Human Physiology
    - Digestion
    - Breathing
________________________________________
🧠 3. Chapter Detail Page: (Test Yourself | Notes | NCERT)
🎯 Current:
•	Click a chapter → see 3 options
✅ Improvements:
🔹 Visual Buttons:
Use big cards with icons and hover animations:
•	📝 Notes
•	📘 NCERT
•	🧪 Test Yourself
🔹 Add Estimated Time for Each Quiz:
“Avg. Completion Time: 25 mins”
🔹 Add Last Attempt Data:
“Last taken: April 4, Score: 18/25, Accuracy: 72%”
________________________________________
🧪 4. Quiz Interface
🎯 Current:
•	One-question per page
•	Timer
•	Question Nav bar
•	Mark for Review, Save & Next, Previous
•	Bookmark support ✅
✅ Improvements:
🔹 Add Submission Confirmation Modal:
“Are you sure you want to submit?” before final submission.
🔹 Show Timer Progress Bar:
•	Visual horizontal bar alongside countdown timer
🔹 Add Question Flag on Top:
•	Show: “You answered this question” / “Marked for Review” / “Bookmarked”
🔹 Accessibility:
•	Use keyboard shortcuts: N for Next, P for Previous, R to Review, B to Bookmark
🔹 Mobile Optimization:
•	Large tap areas for options
•	Fixed nav bar on bottom instead of right
________________________________________
📊 5. Result Dashboard
🎯 Current:
•	Score
•	Correct, Incorrect, Unattempted
•	Accuracy
•	View Analysis
✅ Improvements:
🔹 Add Visuals:
•	Pie Chart for attempts
•	Bar graph of performance per chapter/sub-topic
🔹 Compare With Previous Attempts:
“Your previous score was 64% – +6% improvement”
🔹 Add Performance Tags:
•	Accuracy > 90% → 🔥 Excellent
•	Negative Marks > Positive → ⚠️ Focus Needed
🔹 Add Custom Download:
Button: Download Report as PDF
________________________________________
📖 6. Analysis Page
🎯 Current:
•	Question
•	Selected Option
•	Correct Option
•	Explanation
•	Bookmark Toggle ✅
✅ Improvements:
🔹 Add Filters:
•	View: Bookmarked / Incorrect / All
🔹 Add Tags on Explanation:
•	🔍 “Conceptual Error”
•	🧠 “Memory-based”
•	📘 “Direct NCERT Line”
🔹 “Retake Incorrect Questions” Button:
Custom test from incorrect or bookmarked Qs
________________________________________
🧭 7. Navigation & History Management
✅ Good Practice:
You’ve already thought about History API — great!
Improvements:
🔹 Add breadcrumb navigation:
Home / Biology / Human Physiology / Digestion Test
🔹 Avoid Full Page Reloads:
Use React Router or similar framework for smooth routing.
________________________________________
🛡️ 8. General Improvements
🌟 Theming:
•	Add Light/Dark mode toggle
⚡ Performance:
•	Lazy load PDFs & images
•	Cache questions using localStorage or indexedDB
🔐 User System (Optional Phase 2):
•	Login/Register
•	Save quiz history, bookmarks, notes to user profile
________________________________________
✨ FINAL STRUCTURE OVERVIEW
mathematica
CopyEdit
NEET Master
├── Subjects (Biology | Physics | Chemistry)
│   └── Chapter List (Filterable, Searchable)
│       └── Chapter Detail Page (3 Cards)
│           ├── NCERT PDF
│           ├── Notes PDF
│           └── Quiz
│               └── Test UI (Nav, Timer, Options)
│                   └── Submit → Result Dashboard
│                       └── View Analysis
│                           └── Bookmark / Note
The server is busy. Please try again later.

Build me this website i have provided the details
✅ Goal: Build a NEET Preparation Website (NEET Master)
I am trying to build a Single Page Application (SPA) using technologies like React + React Router, so there are no full-page reloads — only view changes, and everything is handled on the front-end using the HTML5 History API.
________________________________________
🔷 1. Homepage
What it looks like:
•	Big centered title: NEET Master
•	Three clickable cards or buttons (styled attractively) for:
o	Biology
o	Physics
o	Chemistry
Behavior:
•	Clicking on any subject uses the History API to navigate to a new URL (e.g., /biology, /physics, /chemistry) without reloading the page.
________________________________________
🔷 2. Subject Page (e.g., Biology Page)
What it looks like:
•	A scrollable list of all chapters in that subject.
o	Each chapter is displayed as a clickable card or list item.
o	The scrolling should be smooth and infinite-scroll like (or paginated if too long).
Behavior:
•	URL changes to something like /biology
•	Clicking on a chapter like “Cell – The Unit of Life” should change the URL to /biology/cell-the-unit-of-life and open the Chapter View.
________________________________________
🔷 3. Chapter View (for any selected chapter)
What it looks like:
•	The view now shows three tabs or buttons:
1.	Test Yourself
	Contains 10 (or fewer) mini-tests
	Each test has 25 questions related to specific sub-topics of that chapter
	Clicking on a test opens the quiz
2.	Notes
	A PDF viewer opens up displaying your uploaded notes
3.	NCERT
	Displays or embeds the official NCERT PDF for that chapter
Behavior:
•	URL is now like /biology/cell-the-unit-of-life
•	Each tab (Test Yourself, Notes, NCERT) could update the view internally or add a sub-path like /test, /notes, /ncert.
________________________________________
🔷 4. Browser Navigation (History API)
Key Requirement:
•	All navigation must be done using client-side routing.
•	You’ll use React Router’s useNavigate, useLocation, and useHistory hooks internally (or plain window.history.pushState()).
•	Clicking the Back button should:
o	From Chapter View → go back to Chapter List
o	From Chapter List → go back to Home
This makes the site feel like a natural app — not a clunky reload-based website.
________________________________________
🧠 Final Prompt You Can Use (Full AI Prompt for Coding Help)
Create a NEET preparation website called NEET Master using React, styled with TailwindCSS or CSS modules, and routing with React Router DOM (client-side routing).
Key Features:
1.	Homepage with a big title ("NEET Master") and three clickable subject cards: Biology, Physics, Chemistry.
2.	Clicking on a subject (like Biology) should navigate to a scrollable list of all chapters for that subject (e.g., /biology) without reloading the page.
3.	Clicking a chapter opens a Chapter Detail View (e.g., /biology/cell-the-unit-of-life) with 3 sections:
o	Test Yourself – Show 10 mini-tests, each with 25 MCQs based on 10 sub-topics. Smaller chapters may have fewer tests.
o	Notes – Display an embedded PDF of notes that I will upload.
o	NCERT – Embed or open the NCERT chapter PDF in a viewer.
4.	Use the HTML5 History API or React Router so that clicking the browser back button navigates properly to the previous view (subject → home, chapter → subject list, etc.).
5.	No full-page reloads — the app should be a true Single Page Application (SPA).
Bonus: Organize components cleanly. Use folders like /components, /pages, /routes, /assets/pdfs, and prepare dummy data if actual PDFs aren’t uploaded yet.
________________________________________
🧪 NEET Master – Quiz Interface: Ultra-Detailed Breakdown for AI Implementation
________________________________________
🧩 Page Overview
This quiz interface has 3 primary sections on the screen:
---------------------------------------------------------
|                      TOP BAR                          |  ← Header (Chapter + Timer)
---------------------------------------------------------
|                                                       |
|  Main Question Box     |   Question Nav Sidebar       |
|  (75% width)           |   (25% width)                |
|                        |                              |
|                        |                              |
---------------------------------------------------------
|  Footer (with buttons like Mark for Review, etc.)     |
---------------------------------------------------------
________________________________________
🔷 1. Header (Top Section)
Design:
•	Full-width div with:
o	Rounded corners
o	Light colored background
o	Fixed height (e.g. 80px)
o	Flexbox layout to justify content space-between or use CSS grid
Contents:
•	Left/Center: Chapter name (e.g. “Cell – The Unit of Life”)
•	Right: Timer (e.g. 24:13 remaining)
Timer Logic:
•	Starts as soon as the quiz page loads
•	Duration varies by subject:
o	Biology: 25 minutes
o	Chemistry: 25 minutes
o	Physics: 35 minutes
•	When timer hits 0:
o	Automatically triggers the submission logic
________________________________________
🔷 2. Main Question Box (Left Column – 75% total area)
Design:
•	A large rounded rectangle
•	Takes 75% of the page width
•	Background color can reflect the subject (e.g., green for Bio)
•	Padding inside for readability
•	Scroll is disabled; only one question shown at a time
Contents:
•	Question Number & Text – large bold font
•	4 Options – Each:
o	Displayed as a clickable card or radio button
o	One option selectable at a time
o	Selecting one updates the quiz state
o	Selected option is highlighted (e.g. blue border)
Optional Features:
•	Lock the selected option unless user changes it manually
•	Save state immediately (no need to click Save separately)
________________________________________
🔷 3. Navigation Sidebar (Right Column – 25% area)
Design:
•	Vertical rounded rectangle, fixed height (match Main Box)
•	White background
•	Inside: 25 small rounded buttons (question numbers)
Each Button Behavior:
•	Click = navigate directly to that question
•	Color represents status:
o	Green = Answered
o	Red = Not Answered
o	Purple = Marked for Review
o	Half Green/Half Purple Diagonal = Answered & Marked
Technical Note:
•	Use Tailwind (e.g. bg-green-500, bg-purple-600)
•	Use conditional CSS based on question state
________________________________________
🔽 4. Footer Controls (Below the Question Box)
Button Layout:
•	Bottom Left: Mark for Review
•	Bottom Right:
o	Previous (disabled on Q1)
o	Save & Next (next question or submission on Q25)
Button Functionality:
•	Mark for Review:
o	Flags the question
o	Updates its color on sidebar to purple
•	Save & Next:
o	Saves current selected option
o	Navigates to next question
•	Previous:
o	Goes to previous question
o	Disabled on first question
________________________________________
🧠 Question State Data Structure
Track each question in memory like this:
questions: [
  {
    id: 1,
    questionText: "...",
    options: ['A', 'B', 'C', 'D'],
    selectedOption: null,
    isMarkedForReview: false,
    status: 'unanswered' // 'answered', 'reviewed', 'answered+reviewed'
  },
  ...
]
Update logic:
•	On selecting an option → update selectedOption & set status: answered
•	On "Mark for Review" → set isMarkedForReview: true
•	If both answered + reviewed → set status: answered+reviewed
________________________________________
🧮 Scoring Logic
•	Stored and calculated on submission:
o	+4 for correct answers
o	-1 for wrong answers
o	0 for unanswered
When quiz is submitted (via time up or clicking "Submit"), loop through:
score = 0;
questions.forEach(q => {
  if (q.selectedOption === q.correctOption) score += 4;
  else if (q.selectedOption !== null) score -= 1;
})
________________________________________
⌛ Timer Logic
•	Start timer when quiz loads using setInterval()
•	Display formatted time (mm:ss)
•	Store time in state
•	Auto-submit on time expiry:
o	Lock options
o	Redirect to Result Dashboard
________________________________________
🧰 Tech Stack Recommendation
Feature	Tool/Library
Component-based frontend	React
Routing & Back Navigation	React Router
Styling	TailwindCSS or SCSS
State management	Redux or useContext
Timer	useEffect + setInterval
PDF Viewer (Notes/NCERT)	react-pdf
Local state backup	LocalStorage or Redux Persist
________________________________________
🔗 Final AI Prompt (Code-Generation-Ready)
Build a NEET quiz interface using React with TailwindCSS and React Router. Each quiz has 25 MCQ-type questions (4 options), one question visible at a time.
Layout:
•	Top Bar: Full-width, rounded rectangle with:
o	Center: Chapter name
o	Right: Timer (25 min for Bio/Chem, 35 for Physics)
•	Main Box (75%): Displays current question and 4 options (selectable)
•	Right Sidebar (25%): Vertical nav bar with 25 clickable buttons (Q1–Q25)
o	Button color updates dynamically:
	Green: Answered
	Red: Unanswered
	Purple: Marked for Review
	Green+Purple Diagonal: Answered + Review
There shold also be an option to bookmark question and i.e. is as follows
Perfect, Rajdip. Focusing only on the Bookmark Toggle in the Analysis Page — here’s a crystal-clear breakdown and how you can implement it:
________________________________________
🔖 Bookmark Toggle in the Analysis Page (Post-Submission)
________________________________________
🎯 Goal:
Allow users to bookmark or unbookmark any question after the quiz is over, directly from the result analysis page. This helps them flag tricky or important questions for revision even after seeing the correct answers and explanations.
________________________________________
🧩 UI/UX Breakdown:
Each question card on the analysis page will include a Bookmark toggle button:
✅ Button Design:
•	Icon style:
o	⭐ (outlined) → Not bookmarked
o	🌟 (filled) → Bookmarked
•	Tooltip/Text:
o	"Bookmark this question" if not yet bookmarked
o	"Remove bookmark" if already bookmarked
•	Placement: Top-right corner of the question card or near the question number
🔘 Example:
<button
  onClick={() => toggleBookmark(question.id)}
  className="text-yellow-500 hover:text-yellow-600 absolute top-3 right-3"
>
  {bookmarkedQuestions.includes(question.id) ? '🌟' : '☆'}
</button>
________________________________________
🧠 Behavior and Logic:
1. State Management (React-style example):
const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);

function toggleBookmark(qid) {
  setBookmarkedQuestions(prev =>
    prev.includes(qid)
      ? prev.filter(id => id !== qid) // remove if already bookmarked
      : [...prev, qid]               // add if not
  );
}
2. Visual Feedback:
•	When toggled, the icon updates instantly.
•	Optional: Show a toast message like:
✅ "Question bookmarked!"
❌ "Bookmark removed."
________________________________________
🔄 Optional Persistent Storage:
To save bookmarks even after refresh:
•	Use localStorage:
useEffect(() => {
  const saved = JSON.parse(localStorage.getItem('bookmarks')) || [];
  setBookmarkedQuestions(saved);
}, []);

useEffect(() => {
  localStorage.setItem('bookmarks', JSON.stringify(bookmarkedQuestions));
}, [bookmarkedQuestions]);
•	Or save to backend under the user’s profile if logged in.
________________________________________
🔗 Final AI Prompt (for Analysis Page Bookmark Toggle):
On the analysis page of a NEET quiz web app, add a bookmark toggle for each question card. Each question should have a star icon in the top-right corner. Clicking the icon bookmarks or unbookmarks the question for future review.
•	If bookmarked: show a filled yellow star (🌟)
•	If not: show an outlined star (☆)
•	Store the state in React using useState, and optionally persist with localStorage
•	Use TailwindCSS for layout and styling, and position the icon at the top-right of each question card

•	Footer Controls:
o	Left: Mark for Review
o	Right: Previous (disabled on Q1), Save & Next (submits on Q25)
Behavior:
•	Selecting option auto-updates answer
•	Timer countdown auto-submits on time expiry
•	Scoring: +4 correct, -1 wrong, 0 unattempted
•	All state managed with Redux or Context
•	Result sent to result dashboard on submit
________________________________________
________________________________________
📊 RESULT DASHBOARD – FULLY DETAILED BREAKDOWN
________________________________________
🔷 🎯 Purpose:
To provide students a quick snapshot of their performance and deep insights into their strengths and weaknesses after completing a NEET-style quiz.
________________________________________
🧩 PAGE STRUCTURE OVERVIEW
-----------------------------------------------------------
|                      RESULT DASHBOARD                  |
-----------------------------------------------------------
| Score Summary Section (Top Card)                       |
| ----------------------------------------------------- |
| Accuracy & Analysis Section (Middle Cards/Graph)      |
| ----------------------------------------------------- |
| Optionally: Question-wise Breakdown Button            |
-----------------------------------------------------------
________________________________________
🔷 1. 🏆 SCORE SUMMARY SECTION
Design:
•	Large card or box at the top
•	Center-aligned with colored background (e.g., success green or soft blue)
•	Rounded corners, shadow, padding
Data Displayed (Big Fonts):
Metric	Description
Test Score	Final score calculated
Correct Questions	Total questions answered correctly
Incorrect Questions	Total questions answered wrongly
Unattempted Questions	Questions not answered at all
Total Positive Marks	Correct answers × +4
Total Negative Marks	Wrong answers × -1
Sample Calculation Example:
•	Correct = 18 → +72
•	Incorrect = 5 → -5
•	Unattempted = 2
•	Final Score = 72 - 5 = 67
________________________________________
🔷 2. 📊 ACCURACY & ANALYSIS SECTION
🎯 Accuracy Metric:
Accuracy (%) = (Correct Questions / Attempted Questions) * 100
•	Display as both a number and a circular progress bar
•	Attempted Questions = Correct + Incorrect
Example:
•	Correct: 18
•	Incorrect: 5
•	Attempted = 23
•	Accuracy = (18/23) × 100 = 78.26%
📈 Optional Additions (for future):
•	Subject-wise analysis (if you combine multiple chapters or subjects)
•	Time spent per question
•	Pie chart of answer statuses:
o	Green slice: Correct
o	Red: Incorrect
o	Gray: Unattempted
o	Purple: Marked for Review
________________________________________
🔷 3. 📋 QUESTION-WISE BREAKDOWN (Optional Advanced Feature)
•	Expandable section or "View Detailed Report" button
•	Each question displayed with:
o	Question Number
o	Your Selected Answer
o	Correct Answer
o	Status: ✅ / ❌ / ⏳
o	Marked for Review: Yes/No
Useful for reviewing weak areas.
________________________________________
📦 DATA STRUCTURE USED FOR SCORING
You should loop through this data to calculate results:
{
  selectedOption: 'A',
  correctOption: 'B',
  markedForReview: false,
  questionId: 5
}
Score Calculation Logic:
let correct = 0, incorrect = 0, unattempted = 0;

questions.forEach(q => {
  if (!q.selectedOption) unattempted++;
  else if (q.selectedOption === q.correctOption) correct++;
  else incorrect++;
});

let totalPositive = correct * 4;
let totalNegative = incorrect * 1;
let finalScore = totalPositive - totalNegative;
let accuracy = (correct / (correct + incorrect)) * 100;
________________________________________
🎨 TECH STACK & VISUALS SUGGESTIONS
Feature	Recommended Tool
UI Components	React + TailwindCSS
Charts	recharts, chart.js, or react-circular-progressbar
State Management	Redux / Context
Navigation Back to Quiz	React Router
Result Export (Optional)	PDF generator / print
________________________________________
🔗 FINAL AI PROMPT FOR THIS FEATURE:
Build a result dashboard in React for a NEET-style quiz app. After the test is submitted, the dashboard should display:
Main Metrics:
•	Final Score = (Correct × 4) - (Incorrect × 1)
•	Correct Questions – Total answered correctly
•	Incorrect Questions – Total answered wrongly
•	Unattempted Questions – No option selected
•	Total Positive Marks = Correct × 4
•	Total Negative Marks = Incorrect × 1
•	Accuracy (%) = (Correct / Attempted) × 100
Layout:
•	A top summary card with all metrics in large fonts
•	A visual display of accuracy (circular bar or chart)
•	Optional: Expandable question-wise breakdown
Styling:
•	TailwindCSS for UI
•	Use react-circular-progressbar or similar for visual accuracy
•	Must be responsive, clean, and mobile-friendly
State must be derived from quiz question array (with selected and correct answers stored).
________________________________________
Some improvements I would like to add
🌐 1. Homepage Structure: “NEET Master” Landing Page
🎯 Current:
•	Big title: “NEET Master”
•	Three boxes: Biology, Physics, Chemistry
•	Click → opens a chapter list
✅ Improvements:
🔹 Add Short Descriptions Below Each Subject:
“Biology – 11th & 12th NCERT aligned chapters with notes, tests & NCERT PDFs.”
Helps SEO and first-time users.
🔹 Responsive Design:
Ensure mobile-friendly display with:
•	Grid layout on desktop
•	Collapsible cards or stack-view on mobile
🔹 Use Cards with Icons:
•	Biology 🧬, Chemistry ⚗️, Physics 🧲
•	Improves recognition and makes UI more friendly
🔹 Add “Recently Visited Chapters” Section:
Helps users return to where they left off. Stored via localStorage.
________________________________________
📚 2. Chapter List Page (Per Subject)
🎯 Current:
•	On click of subject → scrollable list of all chapters
✅ Improvements:
🔹 Add Search and Filter:
•	Search bar: “Search for a chapter…”
•	Filter: Class 11 or Class 12 toggle
🔹 Chapter Progress Badges:
•	✅ Completed
•	🟡 In Progress
•	🔖 Bookmarked
Stores per user (localStorage or backend)
🔹 Collapse/Expand Topic View (Optional):
Group by unit → collapse/expand topics like:
markdown
CopyEdit
▶️ Human Physiology
    - Digestion
    - Breathing
________________________________________
🧠 3. Chapter Detail Page: (Test Yourself | Notes | NCERT)
🎯 Current:
•	Click a chapter → see 3 options
✅ Improvements:
🔹 Visual Buttons:
Use big cards with icons and hover animations:
•	📝 Notes
•	📘 NCERT
•	🧪 Test Yourself
🔹 Add Estimated Time for Each Quiz:
“Avg. Completion Time: 25 mins”
🔹 Add Last Attempt Data:
“Last taken: April 4, Score: 18/25, Accuracy: 72%”
________________________________________
🧪 4. Quiz Interface
🎯 Current:
•	One-question per page
•	Timer
•	Question Nav bar
•	Mark for Review, Save & Next, Previous
•	Bookmark support ✅
✅ Improvements:
🔹 Add Submission Confirmation Modal:
“Are you sure you want to submit?” before final submission.
🔹 Show Timer Progress Bar:
•	Visual horizontal bar alongside countdown timer
🔹 Add Question Flag on Top:
•	Show: “You answered this question” / “Marked for Review” / “Bookmarked”
🔹 Accessibility:
•	Use keyboard shortcuts: N for Next, P for Previous, R to Review, B to Bookmark
🔹 Mobile Optimization:
•	Large tap areas for options
•	Fixed nav bar on bottom instead of right
________________________________________
📊 5. Result Dashboard
🎯 Current:
•	Score
•	Correct, Incorrect, Unattempted
•	Accuracy
•	View Analysis
✅ Improvements:
🔹 Add Visuals:
•	Pie Chart for attempts
•	Bar graph of performance per chapter/sub-topic
🔹 Compare With Previous Attempts:
“Your previous score was 64% – +6% improvement”
🔹 Add Performance Tags:
•	Accuracy > 90% → 🔥 Excellent
•	Negative Marks > Positive → ⚠️ Focus Needed
🔹 Add Custom Download:
Button: Download Report as PDF
________________________________________
📖 6. Analysis Page
🎯 Current:
•	Question
•	Selected Option
•	Correct Option
•	Explanation
•	Bookmark Toggle ✅
✅ Improvements:
🔹 Add Filters:
•	View: Bookmarked / Incorrect / All
🔹 Add Tags on Explanation:
•	🔍 “Conceptual Error”
•	🧠 “Memory-based”
•	📘 “Direct NCERT Line”
🔹 “Retake Incorrect Questions” Button:
Custom test from incorrect or bookmarked Qs
________________________________________
🧭 7. Navigation & History Management
✅ Good Practice:
You’ve already thought about History API — great!
Improvements:
🔹 Add breadcrumb navigation:
Home / Biology / Human Physiology / Digestion Test
🔹 Avoid Full Page Reloads:
Use React Router or similar framework for smooth routing.
________________________________________
🛡️ 8. General Improvements
🌟 Theming:
•	Add Light/Dark mode toggle
⚡ Performance:
•	Lazy load PDFs & images
•	Cache questions using localStorage or indexedDB
🔐 User System (Optional Phase 2):
•	Login/Register
•	Save quiz history, bookmarks, notes to user profile
________________________________________
✨ FINAL STRUCTURE OVERVIEW
mathematica
CopyEdit
NEET Master
├── Subjects (Biology | Physics | Chemistry)
│   └── Chapter List (Filterable, Searchable)
│       └── Chapter Detail Page (3 Cards)
│           ├── NCERT PDF
│           ├── Notes PDF
│           └── Quiz
│               └── Test UI (Nav, Timer, Options)
│                   └── Submit → Result Dashboard
│                       └── View Analysis
│                           └── Bookmark / Note